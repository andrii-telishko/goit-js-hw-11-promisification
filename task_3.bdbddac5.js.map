{"version":3,"sources":["js/task_3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","Promise","resolve","reject","setTimeout","canProcess","id","logSuccess","console","log","logError","warn","amount","then","catch"],"mappings":"AAAA,IAAMA,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC9C,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD,CAFD;;AAIA,IAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACvC,MAAMC,KAAK,GAAGR,yBAAyB,CAAC,GAAD,EAAM,GAAN,CAAvC;AACE,SAAO,IAAIS,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCC,IAAAA,UAAU,CAAC,YAAM;AACnB,UAAMC,UAAU,GAAGV,IAAI,CAACE,MAAL,KAAgB,GAAnC;;AAEA,UAAIQ,UAAJ,EAAgB;AACdH,QAAAA,OAAO,uBAAgBH,WAAW,CAACO,EAA5B,2BAA+CN,KAA/C,QAAP;AACD,OAFD,MAEO;AACLG,QAAAA,MAAM,wCAAiCJ,WAAW,CAACO,EAA7C,+BAAN;AACD;AACA,KARW,CAAV;AAUH,GAXQ,EAWNN,KAXM,CAAP;AAYH,CAdD;;AAgBA,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAACL,OAAD,EAAa;AAC9BM,EAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AACD,CAFD;;AAIA,IAAMQ,QAAQ,GAAG,SAAXA,QAAW,CAACP,MAAD,EAAY;AAC3BK,EAAAA,OAAO,CAACG,IAAR,CAAaR,MAAb;AACD,CAFD;;AAIAL,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAZ,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAZ,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT;AAIAZ,eAAe,CAAC;AAAEQ,EAAAA,EAAE,EAAE,EAAN;AAAUM,EAAAA,MAAM,EAAE;AAAlB,CAAD,CAAf,CACGC,IADH,CACQN,UADR,EAEGO,KAFH,CAESJ,QAFT","file":"task_3.bdbddac5.js","sourceRoot":"..","sourcesContent":["const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n    return new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n     \r\n    if (canProcess) {\r\n      resolve(`Transaction ${transaction.id} processed in ${delay}ms`);\r\n    } else {\r\n      reject(`Error processing transaction ${transaction.id}. Please try again later.`);\r\n    }  \r\n    })\r\n  \r\n  }, delay);\r\n};\r\n\r\nconst logSuccess = (resolve) => {\r\n  console.log(resolve);\r\n};\r\n\r\nconst logError = (reject) => {\r\n  console.warn(reject);\r\n};\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\n"]}